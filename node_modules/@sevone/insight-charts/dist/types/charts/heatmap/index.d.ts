import * as React from 'react';
import { OnClickType } from '../base-chart';
import { ThemeType, BaseTooltipFormatterType } from '../types';
declare type ValueFormmatterType = BaseTooltipFormatterType & {
    data: {
        value: Array<number | string>;
    };
    value: Array<number | string>;
};
declare type HeatmapTooltipFormmatterType = BaseTooltipFormatterType & {
    data: {
        value: Array<number | string>;
    };
    value: Array<number | string>;
};
export declare type HeatmapOptionType = {
    xAxis: {
        type: string;
        splitArea: {
            show: boolean;
        };
        data: Array<string | number>;
        position: string;
    };
    yAxis: {
        type: string;
        data: Array<string | number>;
        splitArea: {
            show: boolean;
        };
        axisLabel: {
            formatter?: (params: any) => string | number;
        };
    };
    visualMap: {
        min: number;
        max: number;
        show: boolean;
        type: string;
        pieces: Array<{
            min?: number;
            max?: number;
            color?: string;
        }>;
        inRange?: {
            color: Array<string>;
        };
        outRange: {
            color: Array<string>;
        };
        formatter?: (value1: number | string, value2: number | string) => number | string;
        orient: string;
        left: string;
        padding: number;
        itemWidth: number;
        top?: number;
        bottom?: number;
        splitNumber: number;
    };
    series: [{
        type: string;
        data: Array<{
            id: string | number;
            value: Array<number>;
            itemStyle: {
                opacity?: number;
            };
        }>;
        label: {
            show: boolean;
            formatter?: (params: ValueFormmatterType) => string;
            rich?: {
                [key: string]: {
                    color: string;
                };
            };
        };
    }];
    tooltip?: {
        formatter?: (params: HeatmapTooltipFormmatterType) => string;
    };
};
declare type Props = {
    /** The title of the chart */
    title?: string;
    /** The subtitle of the chart */
    subtitle?: string;
    /** The data object to render */
    data: Array<{
        id: string | number;
        value: Array<number>;
    }>;
    /** The config for the X axis */
    xAxis: {
        categories: Array<string> | Array<number>;
    };
    /** The config for the Y axis */
    yAxis: {
        categories: Array<string> | Array<number>;
        formatter?: (params: any) => string | number;
    };
    /** Flag to show cell value */
    showValue?: boolean;
    /** The config for cell values */
    valueFormatter?: {
        formatter: (params: ValueFormmatterType) => string;
        conditions: {
            [key: string]: {
                color: string;
            };
        };
    };
    /** The tooltip options */
    tooltip?: {
        formatter?: (params: HeatmapTooltipFormmatterType) => string;
    };
    /** The legend config */
    legend: {
        show?: boolean;
        min: number;
        max: number;
        customRanges?: Array<{
            min?: number;
            max?: number;
            color?: string;
        }>;
        buckets?: number;
        colors?: Array<string>;
        formatter?: (value1: number | string, value2: number | string) => number | string;
        position: 'top' | 'bottom';
    };
    /** Array of the selected series ids. Note when empty, everything will be selected */
    selectedSeries?: Array<string | number>;
    /** Triggered when a square is selected */
    onSelect?: (ids: Array<string>) => void;
    /** Triggerd on click of the chart */
    onClick?: OnClickType;
    /** Enable when chart is being printed */
    isPrintMode?: boolean;
    /** An object containing theme specific properties */
    theme?: ThemeType;
    /** Custom component to be render with the chart */
    customComponent?: React.ReactNode;
    /** Triggered when chart is resized */
    onResize?: (width: number, height: number) => void;
};
export default function Heatmap(props: Props): JSX.Element;
export {};
