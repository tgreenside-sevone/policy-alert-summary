import * as React from 'react';
import echarts from 'echarts/lib/echarts';
import 'echarts/lib/chart/bar';
import 'echarts/lib/chart/line';
import 'echarts/lib/chart/pie';
import 'echarts/lib/chart/gauge';
import 'echarts/lib/chart/treemap';
import 'echarts/lib/chart/sankey';
import 'echarts/lib/chart/custom';
import 'echarts/lib/chart/heatmap';
import 'echarts/lib/component/tooltip';
import 'echarts/lib/component/dataZoom';
import 'echarts/lib/component/toolbox';
import 'echarts/lib/component/markLine';
import 'echarts/lib/component/markArea';
import 'echarts/lib/component/visualMap';
import 'echarts/lib/component/calendar';
import { LegendTypeType, StandardLegendPositionType } from './legends/types';
import { ThemeType } from '../types';
import { LineChartOptionsType } from '../line';
import { BarChartOptionType } from '../bar';
import { PieChartOptionType } from '../Pie';
import { HistogramChartOptionType } from '../histogram';
import { GaugeChartOptionType } from '../gauge';
import { SankeyChartOptionType } from '../sankey';
import { TreemapChartOptionType } from '../treemap';
import { CalendarHeatmapOptionType } from '../calendar-heatmap';
import { HeatmapOptionType } from '../heatmap';
declare type EchartOptionType = LineChartOptionsType | BarChartOptionType | PieChartOptionType | HistogramChartOptionType | GaugeChartOptionType | SankeyChartOptionType | TreemapChartOptionType | CalendarHeatmapOptionType | HeatmapOptionType;
export declare type EchartEventType = {
    componentType: string;
    seriesId: string;
    seriesType: string;
    seriesIndex: number;
    seriesName: string;
    name: string;
    dataIndex: number;
    data: {
        id: string;
    };
    dataType: string;
    value: number | Array<number>;
    color: string;
    info: any;
};
export declare type OnClickType = (echartsEvent: EchartEventType, chartInstance: {
    [key: string]: any;
}) => void;
declare type ZoomInfoType = {
    type: string;
    escapeConnect?: any;
    batch: Array<{
        dataZoomId: string;
        startValue: number;
        endValue: number;
        type: string;
        from?: any;
        batch: any;
    }>;
};
declare type RestoreInfoTyp = {
    type: string;
    from?: any;
};
export declare type OnZoomType = (zoomInfo: ZoomInfoType, chartInstance: {
    [key: string]: any;
}) => void;
export declare type OnRestoreType = (restoreInfo: RestoreInfoTyp, chartInstance: {
    [key: string]: any;
}) => void;
declare type BaseChartProps = {
    options: EchartOptionType;
    title?: string;
    subtitle?: string;
    legend?: React.ReactElement<any>;
    theme?: ThemeType;
    onClick?: OnClickType;
    onZoom?: OnZoomType;
    onRestore?: OnRestoreType;
    isPrintMode?: boolean;
    standardLegendPosition?: StandardLegendPositionType;
    legendType?: LegendTypeType;
    grid?: {
        top?: number;
        right?: number;
        left?: number;
        bottom?: number;
    };
    customComponent?: React.ReactNode;
};
export default class BaseChart extends React.Component<BaseChartProps> {
    static defaultProps: {
        theme: any;
    };
    reactEcharts: echarts;
    getEchartsInstance: () => any;
    calcChartsGrid: () => {
        containLabel: boolean;
        top: number;
        right: number;
        left: number;
        bottom: number;
    };
    render(): JSX.Element;
}
export {};
