import * as React from 'react';
import { ThemeType, BaseTooltipFormatterType } from '../types';
declare type TreemapDataOpionType = {
    children: Array<TreemapDataOpionType>;
    itemStyle: {
        color: string;
    };
    label: {
        color: string;
    };
    name: string;
    value: [number, number, string];
};
declare type TreemapTooltipFormatterType = BaseTooltipFormatterType & {
    data: TreemapDataOpionType;
    treePathInfo: Array<{
        dataIndex: number;
        name: string;
        value: number;
    }>;
    value: [number, number, string];
};
export declare type TreemapChartOptionType = {
    series: Array<{
        data: TreemapDataOpionType;
        name: string;
        type: string;
        roam: boolean;
        nodeClick: boolean | string;
        left: number;
        right: number;
        top: number;
        bottom: number;
        leafDepth: number;
        visibleMin: number;
        childrenVisibleMin: number;
        breadcrumb: {
            show: boolean;
        };
        levels: Array<{
            colorSaturation?: Array<number>;
            itemStyle?: {
                borderColorSaturation?: number;
                borderColor?: string;
                borderWidth?: number;
                gapWidth: number;
            };
        }>;
    }>;
    tooltip?: {
        show?: boolean;
        formatter?: (params: TreemapTooltipFormatterType) => string;
    };
};
declare type DataType = {
    name: string;
    color?: string;
    labelColor?: string;
    value: Array<number | string>;
    children: Array<DataType>;
};
declare type Props = {
    /** The data to render */
    data: Array<DataType>;
    /** The series name */
    name: string;
    /** The title of the chart */
    title?: string;
    /** The subtitle of the chart */
    subtitle?: string;
    /** The minimum pixel area for a node to have in order to be displayed */
    visibleMin?: number;
    /** The minimum pixel area for a node's children to have in order to be displayed */
    childrenVisibleMin?: number;
    /** Determines whether to show path to select node via bread crumbs */
    showBreadcrumbs?: boolean;
    /** The maximum number of levels to render */
    leafDepth?: number;
    /** The tooltip options */
    tooltip?: {
        show?: boolean;
        formatter?: (params: TreemapTooltipFormatterType) => string;
    };
    /** An object containing theme specific properties */
    theme?: ThemeType;
    /** Determines if the user can drill down nodes */
    drillable?: boolean;
    /** Enable when chart is being printed */
    isPrintMode?: boolean;
    /** Custom component to be render with the chart */
    customComponent?: React.ReactNode;
};
export default function Treemap(props: Props): JSX.Element;
export {};
