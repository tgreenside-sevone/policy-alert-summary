import * as React from 'react';
import { OnZoomType, OnClickType, OnRestoreType } from '../base-chart';
import { TableLegendRowType, TableLegendColumnsType, LegendTypeType, StandardLegendPositionType } from '../base-chart/legends/types';
import { AxisTypeType, AxisFormatterType, ThresholdType, ThemeType, ZoomingType, VisualMapType, MarkAreaType, BaseTooltipFormatterType, ThresholdOptionType, MarkAreaOptionType } from '../types';
import { ToolboxOptionType } from '../utils';
declare type LineTooltipFormatterType = BaseTooltipFormatterType & {
    data: {
        value: Array<number | string>;
    };
    value: Array<number | string>;
};
declare type LineAxisTooltipFormatterType = {
    axisDimension: string;
    axisIndex: number;
    seriesData: Array<LineTooltipFormatterType>;
    value: number | string;
};
declare type LineDataType = Array<{
    value: Array<string | number>;
}>;
declare type LineOptionType = {
    data: LineDataType;
    type: string;
    stack: boolean;
    areaStyle?: {};
    symbol: string;
    showSymbol: boolean;
    symbolSize: number;
    smooth: boolean;
    color: string;
    lineStyle: {
        opacity?: number;
    };
};
declare type LineSubSeriesType = {
    id: string;
    type: 'line' | 'custom';
    name: string;
    data: Array<{
        value: Array<string | number>;
    }>;
    disableWithParent?: boolean;
    lineStyle: {
        type: string;
        opacity: number;
    };
    itemStyle: {
        opacity: number;
    };
};
export declare type LineSeriesType = {
    id: string;
    name: string;
    data: LineDataType;
    yAxisIndex?: number;
    invert: boolean;
    subSeries?: Array<LineSubSeriesType>;
    color?: string;
};
declare type YAxisType = {
    /** The Y axis label */
    name?: string;
    /** The location of the name on the axis */
    nameLocation?: 'start' | 'center' | 'middle' | 'end';
    /** The number of degrees to rotate the y axis labels */
    labelRotation?: number;
    /** Formatting function for the y axis labels */
    formatter?: AxisFormatterType;
};
declare type YAxisScaleType = {
    /** The type of the y axis */
    type: AxisTypeType;
    /** Flag to center origin on the Y axis */
    lockZeroToCenter?: boolean;
    /** The minimum value of the y axis */
    min?: 'dataMin' | number;
    /** The maximum value of the y axis */
    max?: 'dataMax' | number;
};
export declare type LineChartOptionsType = {
    xAxis: {
        type: AxisTypeType;
        name: string;
        nameLocation: string;
        nameGap: number;
        interval: number;
        min: number;
        max: number;
        axisLabel: {
            rotate?: number;
            formatter?: (value: any, index: any) => string;
        };
        boundaryGap?: number;
    };
    yAxis: Array<{
        type: AxisTypeType;
        name: string;
        nameLocation: string;
        interval: number;
        min: number | 'dataMin';
        max: number | 'dataMax';
        axisLabel?: {
            rotate?: number;
            formatter?: (value: any, index: any) => string;
        };
    }>;
    series: Array<LineOptionType | ThresholdOptionType | MarkAreaOptionType | LineSubSeriesType>;
    tooltip?: {
        trigger: 'item' | 'axis';
        formatter?: (params: Array<LineTooltipFormatterType>) => string;
        showCross: boolean;
        axisPointer?: {
            type: string;
            label: {
                formatter: (params: LineAxisTooltipFormatterType) => string;
            };
        };
    };
    dataZoom?: Array<ZoomingType>;
    toolbox?: ToolboxOptionType;
    animation: boolean;
    visualMap?: Array<{
        type: 'piecewise';
        show: false;
        seriesIndex: number;
        outOfRange: {};
    } & VisualMapType>;
};
declare type Props = {
    /** The data to display */
    series: Array<LineSeriesType>;
    /** Flag to enable an area chart */
    area: boolean;
    /** Flag to stack series */
    stack: boolean;
    /** The Visual map to lay over your data */
    visualMaps?: Array<VisualMapType>;
    /** The threshold data to display */
    thresholds?: Array<ThresholdType>;
    /** Array of MarkAres to paint on the graph */
    markAreas?: Array<MarkAreaType>;
    /** Whether the line should be smooth or not */
    smooth?: boolean;
    /** The type of the x axis */
    xAxisType: AxisTypeType;
    /** The X axis label */
    xAxisName?: string;
    /** The minimum value of the x axis */
    xAxisMin?: 'dataMin' | number;
    /** The maximum value of the x axis */
    xAxisMax?: 'dataMax' | number;
    /** The number of degrees to rotate the x axis labels */
    xAxisLabelRotation?: number;
    /** Formatting function for the x axis labels */
    xAxisFormatter?: AxisFormatterType;
    /** The config for the left y axis */
    yAxisLeft: YAxisType;
    /** The config for the right y axis */
    yAxisRight?: YAxisType;
    /** The config for the y axis scale */
    yAxisScale: YAxisScaleType;
    /** The title of the chart */
    title?: string;
    /** The subtitle of the chart */
    subtitle?: string;
    /** The tooltip options */
    tooltip?: {
        trigger: 'item' | 'axis';
        formatter?: (params: Array<LineTooltipFormatterType>) => string;
        showCross?: boolean;
        axisPointerFormatter?: (params: LineAxisTooltipFormatterType) => string;
    };
    /** The zooming options */
    zoomingOptions?: Array<ZoomingType>;
    /** The toolbox options */
    toolboxOptions?: Array<'restore' | 'dataZoom'>;
    /** An object containing theme specific properties */
    theme?: ThemeType;
    /** The legend type */
    legendType?: LegendTypeType;
    /** The position for the standard legend */
    standardLegendPosition?: StandardLegendPositionType;
    /** The rows for the table legend */
    tableLegendRows?: TableLegendRowType;
    /** The columns for the table legend */
    tableLegendColumns?: TableLegendColumnsType;
    /** Triggered when a user clicks on the legend */
    onLegendClick?: (ids: Array<string>) => void;
    /** Triggered when a user attempts to reorder a legend column */
    onLegendColumnReorder?: (order: Array<string>, parent: string) => void;
    /** Triggered when a user attempts to resize a legend column */
    onLegendColumnResize?: (column: string, width: string | number) => void;
    /** Triggerd on click of the chart */
    onClick?: OnClickType;
    /** Triggered on zoom of the chart */
    onZoom?: OnZoomType;
    /** Triggered on click of the restore toolbox option */
    onRestore?: OnRestoreType;
    /** Enable when chart is being printed */
    isPrintMode?: boolean;
    /** Array of the selected series ids. Note when empty, everything will be selected */
    selectedSeries?: Array<string>;
    /** Triggered when a slice is selected */
    onSelect: (ids: Array<string>) => void;
    /** Custom component to be render with the chart */
    customComponent?: React.ReactNode;
    /** Enable charts point symbol on hover */
    showSymbol?: boolean;
};
export default function LineChart(props: Props): JSX.Element;
export {};
