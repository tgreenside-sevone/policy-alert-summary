import * as React from 'react';
import { OnClickType } from '../base-chart';
import { ThemeType, BaseTooltipFormatterType } from '../types';
declare type HeatmapTooltipFormmatterType = BaseTooltipFormatterType & {
    data: {
        value: Array<number | string>;
        id?: string | number;
    };
    value: Array<number | string>;
};
declare type CalendarHeatmapDataType = {
    id: string | number;
    value: Array<number>;
};
declare type MonthLabelFormatterParamsType = {
    yyyy: number;
    yy: string;
    MM: string;
    M: number;
    nameMap: string;
};
export declare type CalendarHeatmapOptionType = {
    calendar: {
        range: [number, number];
        cellSize: [string, string];
        itemStyle: {
            borderWidth: number;
        };
        left: number;
        yearLabel: {
            show: boolean;
        };
        monthLabel: {
            show?: boolean;
            formatter?: (params: MonthLabelFormatterParamsType) => string;
        };
        dayLabel: {
            show?: boolean;
            firstDay?: number;
        };
    };
    visualMap: {
        min: number;
        max: number;
        show: boolean;
        type: string;
        pieces: Array<{
            min?: number;
            max?: number;
            color?: string;
        }>;
        inRange?: {
            color: Array<string>;
        };
        outRange: {
            color: Array<string>;
        };
        formatter?: (value1: number | string, value2: number | string) => number | string;
        orient: string;
        left: string;
        padding: number;
        itemWidth: number;
        top?: number;
        bottom?: number;
        splitNumber: number;
    };
    series: {
        type: string;
        coordinateSystem: string;
        data: Array<{
            id: string | number;
            value: Array<number>;
            itemStyle: {
                opacity?: number;
            };
        }>;
    };
    tooltip?: {
        show?: boolean;
        formatter?: (params: HeatmapTooltipFormmatterType) => string;
    };
};
declare type Props = {
    /** The title of the chart */
    title?: string;
    /** The subtitle of the chart */
    subtitle?: string;
    /** The data object to render */
    data: Array<CalendarHeatmapDataType>;
    /** The date range of the clendar */
    range: [number, number];
    /** The tooltip options */
    tooltip?: {
        show?: boolean;
        formatter?: (params: HeatmapTooltipFormmatterType) => string;
    };
    /** The legend config */
    legend: {
        show?: boolean;
        min: number;
        max: number;
        customRanges?: Array<{
            min?: number;
            max?: number;
            color?: string;
        }>;
        buckets?: number;
        colors?: Array<string>;
        formatter?: (value1: number | string, value2: number | string) => number | string;
        position: 'top' | 'bottom';
    };
    /** Month label config */
    monthLabel?: {
        show?: boolean;
        formatter?: (params: MonthLabelFormatterParamsType) => string;
    };
    /** Day label config */
    dayLabel?: {
        show?: boolean;
        firstDay?: number;
    };
    /** Array of the selected series ids. Note when empty, everything will be selected */
    selectedSeries?: Array<string | number>;
    /** Triggered when a square is selected */
    onSelect: (ids: Array<string>) => void;
    /** Triggerd on click of the chart */
    onClick?: OnClickType;
    /** Enable when chart is being printed */
    isPrintMode?: boolean;
    /** An object containing theme specific properties */
    theme: ThemeType;
    /** Custom component to be render with the chart */
    customComponent?: React.ReactNode;
};
export default function CalendarHeatmap(props: Props): JSX.Element;
export {};
