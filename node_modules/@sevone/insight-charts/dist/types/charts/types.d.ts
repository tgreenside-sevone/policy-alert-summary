export declare type MarkAreaType = {
    id: string;
    name: string;
    start: number | string;
    end: number | string;
};
export declare type VisualMapType = {
    pieces: Array<{
        min: number;
        max: number;
    }>;
    dimension: number;
    inRange: {
        color?: string;
        opacity?: number;
    };
    seriesIndex?: number;
};
export declare type ThresholdOptionType = {
    id: string;
    type: string;
    name: string;
    itemStyle: {
        color: string;
    };
    lineStyle: {
        type: string;
        width: number;
        color: string;
    };
    markLine: {
        silent: true;
        label: {
            show: false;
        };
        lineStyle: {
            type: 'dashed';
            width: number;
            color: string;
        };
        data: Array<{
            [key: string]: number;
        }>;
    };
};
export declare type MarkAreaOptionType = {
    type: string;
    id: string;
    name: string;
    markArea: {
        data: Array<Array<{
            xAxis: number | string;
        }>>;
        itemStyle: {
            opacity: number;
            color: string;
        };
    };
};
export declare type TooltipAxesInfoType = {
    axisDim: string;
    axisId: string;
    axisType: string;
    axisValue: number | string;
    axisValueLabel: string;
};
export declare type BaseTooltipInfoType = {
    color: string;
    componentIndex: number;
    componentType: string;
    componentSubType: string;
    dataIndex: number;
    dimensions: Array<string>;
    encode: {
        [key: string]: Array<number>;
    };
    marker: string;
    name: string;
    seriesId: string;
    seriesIndex: number;
    seriesType: string;
    seriesName: string;
};
export declare type BaseTooltipFormatterType = TooltipAxesInfoType & BaseTooltipInfoType;
export declare type AxisTypeType = 'category' | 'time' | 'value';
export declare type AxisFormatterType = (value: string | number, index: number, recommendedFormat?: string) => string;
export declare type ZoomingType = {
    type: 'inside' | 'slider';
    orient: 'horizontal';
    startValue: number;
    endValue: number;
    labelFormatter?: (value: any) => string;
};
export declare type ThresholdType = {
    id: string;
    name: string;
    color: string;
    width?: number;
    value: number;
    axis: 'xAxis' | 'yAxis';
};
declare type ColorType = {
    color: string;
    contrast: string;
};
export declare type ThemeType = {
    primary1: ColorType;
    primary2: ColorType;
    primary3: ColorType;
    primary4: ColorType;
    primary5: ColorType;
    primary6: ColorType;
    secondary1: ColorType;
    secondary2: ColorType;
    secondary3: ColorType;
    secondary4: ColorType;
    echartsColorPalette?: Array<string>;
};
export {};
