import * as React from 'react';
import { OnClickType } from '../base-chart';
import { TableLegendRowType, TableLegendColumnsType, LegendTypeType, StandardLegendPositionType } from '../base-chart/legends/types';
import { ThemeType, BaseTooltipFormatterType } from '../types';
declare type PieFormmatterType = BaseTooltipFormatterType & {
    data: {
        id: string;
        name: string;
        value: number;
        itemStyle?: {
            color: string;
        };
    };
    value: number;
    percent: number;
};
declare type PieDataType = {
    id: string;
    name: string;
    value: number;
    color?: string;
};
export declare type PieChartOptionType = {
    series: Array<{
        name: string;
        data: Array<PieDataType & {
            itemStyle?: {
                opacity?: number;
                color: string;
            };
        }>;
        type: string;
        radius: Array<string>;
        roseType: string | boolean;
        label: {
            show: boolean;
            formatter: (params: PieFormmatterType) => string;
        };
        hoverAnimation: boolean;
    }>;
    tooltip?: {
        show: boolean;
        formatter?: (params: PieFormmatterType) => string;
    };
};
declare type Props = {
    /** The data object to render */
    series: {
        name?: string;
        data: Array<PieDataType>;
    };
    /** The type of Pie chart to render */
    chartType?: 'PIE' | 'NIGHTINGALE' | 'DONUT';
    /** The radius of the chart */
    radius?: number;
    /** The title of the chart */
    title?: string;
    /** The subtitle of the chart */
    subtitle?: string;
    /** A flag to show/hide labels */
    showLabels?: boolean;
    /** The formatter callback for the labels */
    labelFormatter?: (params: PieFormmatterType) => string;
    /** The tooltip options */
    tooltip?: {
        show: boolean;
        formatter?: (params: PieFormmatterType) => string;
    };
    /** An object containing theme specific properties */
    theme?: ThemeType;
    /** The legend type */
    legendType?: LegendTypeType;
    /** The position for the standard legend */
    standardLegendPosition?: StandardLegendPositionType;
    /** The rows for the table legend */
    tableLegendRows?: TableLegendRowType;
    /** The columns for the table legend */
    tableLegendColumns?: TableLegendColumnsType;
    /** Triggered when a user clicks on the legend */
    onLegendClick?: (ids: Array<string>) => void;
    /** Triggered when a user attempts to reorder a legend column */
    onLegendColumnReorder?: (order: Array<string>, parent: string) => void;
    /** Triggered when a user attempts to resize a legend column */
    onLegendColumnResize?: (column: string, width: string | number) => void;
    /** Triggerd on click of the chart */
    onClick?: OnClickType;
    /** Enable when chart is being printed */
    isPrintMode?: boolean;
    /** Array of the selected series ids. Note when empty, everything will be selected */
    selectedSeries?: Array<string>;
    /** Triggered when a slice is selected */
    onSelect: (ids: Array<string>) => void;
    /** Custom component to be render with the chart */
    customComponent?: React.ReactNode;
};
export default function PieChart(props: Props): JSX.Element;
export {};
