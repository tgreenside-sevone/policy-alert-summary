import * as React from 'react';
import { OnClickType } from '../base-chart';
import { TableLegendRowType, TableLegendColumnsType, LegendTypeType, StandardLegendPositionType } from '../base-chart/legends/types';
import { AxisTypeType, AxisFormatterType, ThresholdType, ThemeType, BaseTooltipFormatterType, ThresholdOptionType } from '../types';
declare type HistogramTooltipFormatterType = BaseTooltipFormatterType & {
    data: {
        value: Array<number | string>;
    };
    value: Array<number | string>;
};
declare type HistogramSeriesLabelFormatterType = BaseTooltipFormatterType & {
    data: {
        id: string;
        itemStyle?: {
            color: string;
        };
    };
    value: Array<number | string>;
};
declare type HistogramEchartsType = HistogramSerieType & {
    type: string;
    label?: {
        show: boolean;
        position: string;
        formatter: (params: HistogramSeriesLabelFormatterType) => string;
    };
    color: string;
    itemStyle: {
        opacity?: number;
    };
    data: Array<{
        value: Array<string | number>;
    }>;
};
export declare type HistogramChartOptionType = {
    xAxis: {
        nameLocation: string;
        nameTextStyle: {
            padding: number;
        };
        type: AxisTypeType;
        name?: string;
        interval: number;
        min: number;
        max: number;
        axisLabel: {
            rotate?: number;
            formatter?: AxisFormatterType;
        };
    };
    yAxis: {
        nameLocation: string;
        nameTextStyle: {
            padding: number;
        };
        type: AxisTypeType;
        name?: string;
        min: number | 'dataMin';
        max: number | 'dataMax';
        axisLabel?: {
            rotate?: number;
            formatter?: AxisFormatterType;
        };
    };
    series: Array<HistogramEchartsType | ThresholdOptionType>;
    tooltip?: {
        show: boolean;
        trigger: string;
        axisPointer: {
            type: string;
        };
        formatter: (params: HistogramTooltipFormatterType) => string;
    };
    animation: boolean;
};
declare type HistogramSerieType = {
    id: string;
    name?: string;
    buckets: Array<{
        tally: number;
        minValue: number;
        maxValue: number;
    }>;
    color?: string;
    subSeries?: Array<HistogramSerieType & {
        itemStyle: {
            opacity: any;
        };
    }>;
};
declare type Props = {
    /** The data to display */
    series: Array<HistogramSerieType>;
    /** The threshold data to display */
    thresholds?: Array<ThresholdType>;
    /** */
    seriesLabels?: {
        position: 'top' | 'bottom' | 'right' | 'left';
        show: boolean;
        formatter?: (params: HistogramSeriesLabelFormatterType) => string;
    };
    /** The type of the y axis */
    yAxisType: AxisTypeType;
    /** The X axis label */
    xAxisName?: string;
    /** The Y axis label */
    yAxisName?: string;
    /** The interval for the x axis of the chart */
    xAxisInterval?: number;
    /** The interval for the y axis of the chart */
    yAxisInterval?: number;
    /** The recommended number of segments for the x axis.
     * If respective interval is passed in this value will be ignored */
    xAxisSplitNumber?: number;
    /** The recommended number of segments for the y axis of the chart.
     * If respective interval is passed in this value will be ignored */
    yAxisSplitNumber?: number;
    /** The minimum value of the y axis */
    yAxisMin?: 'dataMin' | number;
    /** The maximum value of the y axis */
    yAxisMax?: 'dataMax' | number;
    /** The number of degrees to rotate the x axis labels */
    xAxisLabelRotation: number;
    /** The number of degrees to rotate the y axis labels */
    yAxisLabelRotation: number;
    /** Formatting function for the x axis labels */
    xAxisFormatter?: AxisFormatterType;
    /** Formatting function for the y axis labels */
    yAxisFormatter?: AxisFormatterType;
    /** The title of the chart */
    title?: string;
    /** The subtitle of the chart */
    subtitle?: string;
    /** The tooltip options */
    tooltip?: {
        trigger: 'item' | 'axis';
        show: boolean;
        formatter?: (params: HistogramTooltipFormatterType) => string;
    };
    /** An object containing theme specific properties */
    theme?: ThemeType;
    /** The legend type */
    legendType?: LegendTypeType;
    /** The position for the standard legend */
    standardLegendPosition?: StandardLegendPositionType;
    /** The rows for the table legend */
    tableLegendRows?: TableLegendRowType;
    /** The columns for the table legend */
    tableLegendColumns?: TableLegendColumnsType;
    /** Triggered when a user clicks on the legend */
    onLegendClick?: (ids: Array<string>) => void;
    /** Triggered when a user attempts to reorder a legend column */
    onLegendColumnReorder?: (order: Array<string>, parent: string) => void;
    /** Triggered when a user attempts to resize a legend column */
    onLegendColumnResize?: (column: string, width: string | number) => void;
    /** Triggerd on click of the chart */
    onClick?: OnClickType;
    /** Enable when chart is being printed */
    isPrintMode?: boolean;
    /** Array of the selected series ids. Note when empty, everything will be selected */
    selectedSeries?: Array<string>;
    /** Triggered when a slice is selected */
    onSelect: (ids: Array<string>) => void;
    /** Custom component to be render with the chart */
    customComponent?: React.ReactNode;
};
export default function Histogram(props: Props): JSX.Element;
export {};
