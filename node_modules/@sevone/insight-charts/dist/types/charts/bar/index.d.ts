import * as React from 'react';
import { OnZoomType, OnClickType, OnRestoreType } from '../base-chart';
import { TableLegendRowType, TableLegendColumnsType, LegendTypeType, StandardLegendPositionType } from '../base-chart/legends/types';
import { AxisTypeType, AxisFormatterType, ThresholdType, ThemeType, ZoomingType, VisualMapType, MarkAreaType, BaseTooltipFormatterType, ThresholdOptionType, MarkAreaOptionType } from '../types';
import { ToolboxOptionType } from '../utils';
declare type BarTooltipFormatterType = BaseTooltipFormatterType & {
    data: {
        value: Array<number | string>;
    };
    value: Array<number | string>;
};
declare type BarSeriesLabelFormatterType = BaseTooltipFormatterType & {
    data: {
        id: string;
        itemStyle?: {
            color: string;
        };
    };
    value: Array<number | string>;
};
declare type BarSubSeriesType = {
    id: string;
    type: 'line' | 'custom' | 'bar';
    name: string;
    data: Array<{
        id: string;
        value: Array<string | number>;
        color?: string;
    }>;
    disableWithParent?: boolean;
    lineStyle: {
        type: string;
        opacity: number;
    };
    itemStyle: {
        opacity: number;
    };
    barCategoryGap?: string;
    symbol?: string;
    stack: boolean;
};
export declare type BarSeriesType = {
    id: string;
    name: string;
    data: Array<{
        id?: string;
        value: Array<string | number>;
        color?: string;
    }>;
    color?: string;
    subSeries?: Array<BarSubSeriesType>;
    barCategoryGap: string;
    label?: {
        show: boolean;
        position: string;
        formatter?: (params: BarSeriesLabelFormatterType) => string;
    };
};
export declare type BarChartOptionType = {
    xAxis: {
        nameLocation: string;
        type: AxisTypeType;
        name?: string;
        interval: number;
        min: number;
        max: number;
        axisLabel: {
            rotate?: number;
            formatter?: (value: any, index: any) => string;
        };
        boundaryGap?: number;
    };
    yAxis: {
        nameLocation: string;
        type: AxisTypeType;
        name?: string;
        interval: number;
        min: number | 'dataMin';
        max: number | 'dataMax';
        axisLabel?: {
            rotate?: number;
            formatter?: (value: any, index: any) => string;
        };
    };
    series: Array<BarSubSeriesType | BarSeriesType | ThresholdOptionType | MarkAreaOptionType>;
    tooltip?: {
        show: boolean;
        trigger: string;
        formatter: (params: BarTooltipFormatterType) => string;
    };
    dataZoom?: Array<ZoomingType>;
    toolbox?: ToolboxOptionType;
    animation: boolean;
    visualMap?: Array<{
        type: 'piecewise';
        show: false;
        outOfRange: {};
    } & VisualMapType>;
};
declare type Props = {
    /** The data to display, note subSeries will only display when chart
     *  is using a vertical layout and xAxisType is type "time" */
    series: Array<BarSeriesType>;
    /** The Visual map to lay over your data */
    visualMaps?: Array<VisualMapType>;
    /** The threshold data to display. Visual maps will only apply when
     * they're multiple series or xAxisType is type "time" */
    thresholds?: Array<ThresholdType>;
    /** Array of MarkAres to paint on the graph */
    markAreas?: Array<MarkAreaType>;
    /** The bar label settings */
    seriesLabels?: {
        position: 'top' | 'bottom' | 'right' | 'left';
        show: boolean;
        formatter?: (params: BarSeriesLabelFormatterType) => string;
    };
    /** The orientation of the chart */
    layout?: 'horizontal' | 'vertical';
    /** Flag to individually color each bar. Does nothing when any axes are
     * type time */
    breakoutByBar?: boolean;
    /** The type of the x axis */
    xAxisType: AxisTypeType;
    /** The type of the y axis */
    yAxisType: AxisTypeType;
    /** The X axis label */
    xAxisName?: string;
    /** The Y axis label */
    yAxisName?: string;
    /** The minimum value of the x axis */
    xAxisMin?: 'dataMin' | number;
    /** The maximum value of the x axis */
    xAxisMax?: 'dataMax' | number;
    /** The minimum value of the y axis */
    yAxisMin?: 'dataMin' | number;
    /** The maximum value of the y axis */
    yAxisMax?: 'dataMax' | number;
    /** The number of degrees to rotate the x axis labels */
    xAxisLabelRotation?: number;
    /** The number of degrees to rotate the y axis labels */
    yAxisLabelRotation?: number;
    /** Formatting function for the x axis labels */
    xAxisFormatter?: AxisFormatterType;
    /** Formatting function for the y axis labels */
    yAxisFormatter?: AxisFormatterType;
    /** Flag to stack series */
    stack: boolean;
    /** The title of the chart */
    title?: string;
    /** The subtitle of the chart */
    subtitle?: string;
    /** The tooltip options */
    tooltip?: {
        trigger: 'item' | 'axis';
        show: boolean;
        formatter?: (params: BarTooltipFormatterType) => string;
    };
    /** The zooming options */
    zoomingOptions?: Array<ZoomingType>;
    /** The toolbox options */
    toolboxOptions?: Array<'restore' | 'dataZoom'>;
    /** An object containing theme specific properties */
    theme?: ThemeType;
    /** The legend type */
    legendType?: LegendTypeType;
    /** The position for the standard legend */
    standardLegendPosition?: StandardLegendPositionType;
    /** The rows for the table legend */
    tableLegendRows?: TableLegendRowType;
    /** The columns for the table legend */
    tableLegendColumns?: TableLegendColumnsType;
    /** Triggered when a user clicks on the legend */
    onLegendClick?: (ids: Array<string>) => void;
    /** Triggered when a user attempts to reorder a legend column */
    onLegendColumnReorder?: (order: Array<string>, parent: string) => void;
    /** Triggered when a user attempts to resize a legend column */
    onLegendColumnResize?: (column: string, width: string | number) => void;
    /** Triggerd on click of the chart */
    onClick?: OnClickType;
    /** Triggered on zoom of the chart */
    onZoom?: OnZoomType;
    /** Triggered on click of the restore toolbox option */
    onRestore?: OnRestoreType;
    /** Enable when chart is being printed */
    isPrintMode?: boolean;
    /** Array of the selected series ids. Note when empty, everything will be selected */
    selectedSeries?: Array<string>;
    /** Triggered when a slice is selected */
    onSelect: (ids: Array<string>) => void;
    /** Percentage of space between bars. Number between 0-100  */
    barGap?: number;
    /** Custom component to be render with the chart */
    customComponent?: React.ReactNode;
};
export default function BarChart(props: Props): JSX.Element;
export {};
