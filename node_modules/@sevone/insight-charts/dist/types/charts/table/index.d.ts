import * as React from 'react';
import { ThemeType } from '../types';
import { RowType, SortByType, ColumnType as BaseColumnType } from './types';
import { ColorRangeSettingsType } from './color-range-cell';
declare type OptionType = {
    label: string;
    value: React.ReactText;
};
declare type OptionsValue = {
    options: OptionType[];
    value: OptionType[];
};
declare type ColumnType = BaseColumnType & {
    searchable?: boolean;
};
declare type ReactElement = React.ReactElement;
declare type Props = {
    /** Rows to display */
    rows: RowType[];
    /** Columns to display */
    columns: ColumnType[];
    /** True wraps text in cells, false will truncate overflowing text with ellipses. */
    wrapCells?: boolean;
    /** Larger top title */
    title?: string;
    /** Smaller text below the title */
    subtitle?: string;
    /** Enable when printing to optimize layout for printing  */
    isPrintLayout?: boolean;
    /** IDs of rows that are checked */
    selectedRows?: Array<RowType['id']>;
    /** Rows pinned to the top of the table */
    pinnedTopRows?: RowType[];
    /** Rows pinned to the bottom of the table */
    pinnedBottomRows?: RowType[];
    /**
     * Show a search box above the table, as well as one in each column where
     * `searchable` has not been set to `false`.
     */
    allowSearch?: boolean;
    allowToggleColumns?: boolean;
    /** The current page to display */
    page?: number;
    /** The number of rows to display per page */
    pageSize?: number;
    /**
     * The total number of rows, if it is different than the length of `rows`.
     * Necessary when remotely paging rows.
     */
    rowCount?: number;
    /** Whether the table should be displayed in a loading state */
    loading?: boolean;
    /** Callback when columns are reordered. Omit to disable column reordering. */
    onColumnReorder?: (order: React.ReactText[], parent?: string | null) => void;
    /** Callback when columns are resized. Omit to disable column resizing. */
    onColumnResize?: (column: React.ReactText, width: string | number) => void;
    /** Triggered when a user changes the current page */
    onPageChange?: (page: number) => void;
    /** Callback when rows are selected. Omit to disable row selection. */
    onRowSelection?: (ids: Array<RowType['id']>) => void;
    /** Callback when a column is sorted on. */
    onSortBy?: (sortBy: Array<SortByType>) => void;
    /** Color range settings; see below for details */
    colorRangeSettings?: ColorRangeSettingsType<string | number>;
    /** Custom elements to display in the control bar above the table */
    topBarComponents?: ReactElement;
    /** Custom elements to show below the table */
    footerComponents?: ReactElement;
    /** An object containing theme specific properties */
    theme?: ThemeType;
    /**
     * Enable virtual scrolling, which only renders rows visible in the
     * current viewport. Table must be in a container with a constrained height.
     */
    virtualScroll?: boolean;
};
declare type State = {
    search: string;
    showSearchRow: boolean;
    hiddenColumns: Set<string | number>;
    columnSearches: {
        [columnId: string]: string;
    };
};
export declare class Table extends React.Component<Props, State> {
    static defaultProps: {
        allowSearch: boolean;
    };
    state: {
        search: string;
        columnSearches: {};
        showSearchRow: boolean;
        hiddenColumns: Set<React.ReactText>;
    };
    getColumnSelectorProps(): OptionsValue;
    processColumn: (col: ColumnType) => ColumnType;
    getVisibleColumns(): ColumnType[];
    /**
     * Get visible rows based on the main search, and the search for each column.
     * Filters are ANDed together.
     */
    getVisibleRows(): RowType[];
    /**
     * Prepend the built-in search row to the user's passed in pinnedTopRows.
     */
    getPinnedTopRows(): RowType[] | null;
    handleColumnReorder: (columnOrder: React.ReactText[], parent: string) => void;
    handleVisibleColumnsChange: (columns: OptionType[]) => void;
    handleSearchChange: (search: string) => void;
    handleToggleSearchRow: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
    render(): JSX.Element;
}
export {};
