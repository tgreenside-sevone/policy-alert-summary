import * as React from 'react';
import { ThemeType } from '../types';
declare type ColorRange<T extends number | string> = {
    to: T;
    color: string;
    icon?: string;
    textColor?: string;
    includeIcon: boolean;
};
export declare type ColorRangeSettingsType<T extends number | string> = {
    from: T;
    colorCellOnly?: boolean;
    ranges: Array<ColorRange<T>>;
    /**
     * The column(s) to color based on the ranges. If `proxyColumn` is undefined,
     * this is also the column used to determine the value for the range.
     * */
    column: string | Array<string>;
    /**
     * The column(s) to use to determine the value for the range. If undefined,
     * `column` will be used instead. `column` and `proxyColumn` can be parallel
     * arrays to color multiple columns based on other columns.
     *
     * For example:
     *
     * column =      [ 'a', 'b', 'c' ];
     * proxyColumn = [ 'd', 'e', 'f' ];
     *
     * Would mean color column 'a' based on the value in 'd', column 'b' based
     * on the value in 'e', and column 'c' based on the value in 'f'.
     *
     * If `column` is an array, and `proxyColumn` is a single value, that means
     * color all the columns in `column` based on the single `proxyColumn`.
     */
    proxyColumn?: string | Array<string>;
    includeColorRanges: boolean;
};
export declare type ColorRangeCellProps<T extends number | string> = {
    settings: ColorRangeSettingsType<T>;
    row: {
        [key: string]: number | string;
    };
    column: string;
    children: React.ReactNode;
    theme?: ThemeType;
};
/**
 * Color range cell to be used in the Table visualization.
 * */
export default function ColorRangeCell(props: ColorRangeCellProps<any>): JSX.Element;
export {};
