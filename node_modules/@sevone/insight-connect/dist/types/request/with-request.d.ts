import * as React from 'react';
import { request } from './request';
declare type WithRequestProps = Partial<typeof request>;
declare function withRequest<T extends WithRequestProps = WithRequestProps>(WrappedComponent: React.ComponentType<T>): {
    new (props: Readonly<Pick<T, Exclude<keyof T, "raw" | "query" | "subscribe">>>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Pick<T, Exclude<keyof T, "raw" | "query" | "subscribe">>>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Pick<T, Exclude<keyof T, "raw" | "query" | "subscribe">>> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Pick<T, Exclude<keyof T, "raw" | "query" | "subscribe">>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Pick<T, Exclude<keyof T, "raw" | "query" | "subscribe">>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Pick<T, Exclude<keyof T, "raw" | "query" | "subscribe">>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Pick<T, Exclude<keyof T, "raw" | "query" | "subscribe">>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Pick<T, Exclude<keyof T, "raw" | "query" | "subscribe">>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Pick<T, Exclude<keyof T, "raw" | "query" | "subscribe">>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Pick<T, Exclude<keyof T, "raw" | "query" | "subscribe">>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Pick<T, Exclude<keyof T, "raw" | "query" | "subscribe">>, context?: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Pick<T, Exclude<keyof T, "raw" | "query" | "subscribe">>>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Pick<T, Exclude<keyof T, "raw" | "query" | "subscribe">>> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Pick<T, Exclude<keyof T, "raw" | "query" | "subscribe">>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Pick<T, Exclude<keyof T, "raw" | "query" | "subscribe">>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Pick<T, Exclude<keyof T, "raw" | "query" | "subscribe">>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Pick<T, Exclude<keyof T, "raw" | "query" | "subscribe">>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Pick<T, Exclude<keyof T, "raw" | "query" | "subscribe">>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Pick<T, Exclude<keyof T, "raw" | "query" | "subscribe">>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Pick<T, Exclude<keyof T, "raw" | "query" | "subscribe">>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextType?: React.Context<any> | undefined;
};
export { withRequest };
