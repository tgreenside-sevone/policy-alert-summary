import * as React from 'react';
import { PathsType } from '../selection-paths';
import { ResourceTypesType, ResourcesType, ResourceListType, HierarchicalDataType, DeviceType, DeviceGroupType, DeviceTypeType, ObjectType, ObjectGroupType, ObjectTypeType, IndicatorTypeType, PluginType, InterfaceType, FlowDeviceType, CustomSelectorType } from '../types';
declare type Props = {
    ghost?: boolean;
    datasources: Array<number | null>;
    type: ResourceTypesType | null;
    resources: ResourceListType;
    hierarchicalData: HierarchicalDataType;
    allowedPaths?: PathsType;
    customTypes: Array<CustomSelectorType>;
    onChange: (type: ResourceTypesType, resources: ResourceListType) => void;
    onDelete?: () => void;
};
declare class ResourceLine extends React.Component<Props> {
    getSubPath(): string[];
    getPath(): string[] | null;
    getAvailableTypes(): string[];
    getHierarchicalDataOfType<T extends ResourcesType>(type: ResourceTypesType): any;
    isDeviceResource(type: ResourceTypesType, resources: ResourceListType): resources is Array<DeviceType>;
    isDeviceGroupResource(type: ResourceTypesType, resources: ResourceListType): resources is Array<DeviceGroupType>;
    isDeviceTypeResource(type: ResourceTypesType, resources: ResourceListType): resources is Array<DeviceTypeType>;
    isObjectResource(type: ResourceTypesType, resources: ResourceListType): resources is Array<ObjectType>;
    isObjectGroupResource(type: ResourceTypesType, resources: ResourceListType): resources is Array<ObjectGroupType>;
    isPluginTypeResource(type: ResourceTypesType, resources: ResourceListType): resources is Array<PluginType>;
    isObjectTypeResource(type: ResourceTypesType, resources: ResourceListType): resources is Array<ObjectTypeType>;
    isFlowDeviceResource(type: ResourceTypesType, resources: ResourceListType): resources is Array<FlowDeviceType>;
    isInterfaceResource(type: ResourceTypesType, resources: ResourceListType): resources is Array<InterfaceType>;
    isIndicatorTypeResource(type: ResourceTypesType, resources: ResourceListType): resources is Array<IndicatorTypeType>;
    handleTypeChange: (type: string) => void;
    handleResourcesChange: (resources: ResourceListType) => void;
    renderDeviceSelector: () => JSX.Element | null;
    renderDeviceGroupSelector: () => JSX.Element | null;
    renderDeviceTypeSelector: () => JSX.Element | null;
    renderObjectSelector: () => JSX.Element | null;
    renderObjectTypeSelector: () => JSX.Element | null;
    renderObjectGroupSelector: () => JSX.Element | null;
    renderIndicatorTypeSelector: () => JSX.Element | null;
    renderFlowDeviceSelector: () => JSX.Element | null;
    renderInterfaceSelector: () => JSX.Element | null;
    renderPluginSelector: () => JSX.Element | null;
    renderCustomSelector: () => JSX.Element | null;
    render(): JSX.Element;
}
export { ResourceLine };
