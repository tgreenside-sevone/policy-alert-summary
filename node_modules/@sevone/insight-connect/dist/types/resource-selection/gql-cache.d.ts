/// <reference types="react" />
export declare type GQLTopNViewType = {
    _id: string;
    name: string;
    custom: boolean;
};
export declare type GQLFlowDeviceType = {
    _id: string;
    name: string;
    originIp: string;
    versions: string;
};
export declare type GQLFlowViewType = {
    _id: string;
    name: string;
    category: string;
};
export declare type GQLInterfaceType = {
    _id: string;
    name: string;
    interface: number;
    description: string;
    flowDevice: GQLFlowDeviceType;
};
export declare type GQLDeviceType = {
    _id: string;
    name: string;
    displayName: string;
};
export declare type GQLPluginType = {
    _id: string;
    name: string;
    objectName: string;
};
export declare type GQLDeviceTagType = {
    _id: string;
    name: string;
    path: string;
    isLeaf: boolean;
    parent?: {
        path: string;
    };
};
export declare type GQLDeviceGroupType = GQLDeviceTagType;
export declare type GQLDeviceTypeType = GQLDeviceTagType;
export declare type GQLObjectType = {
    _id: string;
    name: string;
    displayName: string;
    description: string;
    device: GQLDeviceType;
    plugin: GQLPluginType;
};
export declare type GQLObjectTypeType = {
    _id: string;
    name: string;
    path: string;
    plugin: GQLPluginType;
};
export declare type GQLObjectGroupType = {
    _id: string;
    name: string;
    objectClass: {
        id: number;
        name: string;
    };
};
export declare type GQLIndicatorTypeType = {
    _id: string;
    name: string;
    description: string;
    objectType: GQLObjectTypeType;
};
export declare type GQLIndicatorType = {
    _id: string;
    device: {
        name: string;
        displayName: string;
    };
    object: {
        name: string;
        displayName: string;
    };
    indicatorType: GQLIndicatorTypeType;
};
export declare type GQLDataType = GQLTopNViewType | GQLPluginType | GQLFlowDeviceType | GQLFlowViewType | GQLInterfaceType | GQLDeviceType | GQLDeviceGroupType | GQLObjectType | GQLObjectTypeType | GQLObjectGroupType | GQLIndicatorTypeType | GQLIndicatorType;
export declare type CacheType = {
    topNView: Record<string, GQLTopNViewType>;
    plugin: Record<string, GQLPluginType>;
    flowDevice: Record<string, GQLFlowDeviceType>;
    flowView: Record<string, GQLFlowViewType>;
    interface: Record<string, GQLInterfaceType>;
    device: Record<string, GQLDeviceType>;
    deviceGroup: Record<string, GQLDeviceGroupType>;
    deviceType: Record<string, GQLDeviceTypeType>;
    object: Record<string, GQLObjectType>;
    objectType: Record<string, GQLObjectTypeType>;
    objectGroup: Record<string, GQLObjectGroupType>;
    indicatorType: Record<string, GQLIndicatorTypeType>;
    indicator: Record<string, GQLIndicatorType>;
};
export declare type GQLCacheType = {
    getData: <T extends GQLDataType>(type: keyof CacheType, key: string) => T | null;
    getDataOfType: <T extends GQLDataType>(type: keyof CacheType) => Array<T>;
    updateCache: (type: keyof CacheType, key: string, data: GQLDataType) => void;
    bulkUpdateCache: (type: keyof CacheType, data: {
        [key: string]: GQLDataType;
    }) => void;
    clearCache: () => void;
    cache: CacheType;
};
declare const GQLCache: import("react").Context<GQLCacheType>;
export { GQLCache };
