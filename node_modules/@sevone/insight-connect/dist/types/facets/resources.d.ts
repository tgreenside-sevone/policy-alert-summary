import { ResourceListType } from '../resource-selection';
declare const resourceToSchema: {
    PLUGIN: {
        readonly type: "object";
        readonly properties: {
            readonly value: {
                readonly type: "string";
            };
        };
        readonly required: readonly ["value"];
    };
    INTERFACE: {
        readonly type: "object";
        readonly properties: {
            readonly value: {
                readonly type: "number";
            };
            readonly flowDevice: {
                readonly type: "object";
                readonly properties: {
                    readonly value: {
                        readonly type: "string";
                    };
                };
                readonly required: readonly ["value"];
            };
        };
        readonly required: readonly ["value", "flowDevice"];
    };
    DEVICE: {
        readonly type: "object";
        readonly properties: {
            readonly value: {
                readonly type: "string";
            };
        };
        readonly required: readonly ["value"];
    };
    DEVICE_GROUP: {
        readonly type: "object";
        readonly properties: {
            readonly value: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
        };
        readonly required: readonly ["value"];
    };
    OBJECT_TYPE: {
        readonly type: "object";
        readonly properties: {
            readonly value: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly plugin: {
                readonly type: "object";
                readonly properties: {
                    readonly value: {
                        readonly type: "string";
                    };
                };
                readonly required: readonly ["value"];
            };
        };
        readonly required: readonly ["value", "plugin"];
    };
    OBJECT: {
        readonly type: "object";
        readonly properties: {
            readonly value: {
                readonly type: "string";
            };
            readonly device: {
                readonly type: "object";
                readonly properties: {
                    readonly value: {
                        readonly type: "string";
                    };
                };
                readonly required: readonly ["value"];
            };
            readonly plugin: {
                readonly type: "object";
                readonly properties: {
                    readonly value: {
                        readonly type: "string";
                    };
                };
                readonly required: readonly ["value"];
            };
        };
        readonly required: readonly ["value", "device", "plugin"];
    };
    OBJECT_GROUP: {
        readonly type: "object";
        readonly properties: {
            readonly value: {
                readonly type: "string";
            };
            readonly objectClass: {
                readonly type: "object";
                readonly properties: {
                    readonly value: {
                        readonly type: "string";
                    };
                };
                readonly required: readonly ["value"];
            };
        };
        readonly required: readonly ["value", "objectClass"];
    };
    INDICATOR_TYPE: {
        readonly type: "object";
        readonly properties: {
            readonly value: {
                readonly type: "string";
            };
            readonly objectType: {
                readonly type: "object";
                readonly properties: {
                    readonly value: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly plugin: {
                        readonly type: "object";
                        readonly properties: {
                            readonly value: {
                                readonly type: "string";
                            };
                        };
                        readonly required: readonly ["value"];
                    };
                };
                readonly required: readonly ["value", "plugin"];
            };
        };
        readonly required: readonly ["value", "objectType"];
    };
    INDICATOR: {
        readonly type: "object";
        readonly properties: {
            readonly deviceName: {
                readonly type: "string";
            };
            readonly objectName: {
                readonly type: "string";
            };
            readonly indicatorType: {
                readonly type: "object";
                readonly properties: {
                    readonly value: {
                        readonly type: "string";
                    };
                    readonly objectType: {
                        readonly type: "object";
                        readonly properties: {
                            readonly value: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly plugin: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly value: {
                                        readonly type: "string";
                                    };
                                };
                                readonly required: readonly ["value"];
                            };
                        };
                        readonly required: readonly ["value", "plugin"];
                    };
                };
                readonly required: readonly ["value", "objectType"];
            };
        };
        readonly required: readonly ["deviceName", "objectName", "indicatorType"];
    };
};
declare type ResourceTypesType = keyof typeof resourceToSchema;
declare type ResourcesPayloadType = {
    type: ResourceTypesType;
    resources: ResourceListType;
};
declare type MixedResourcesPayloadType = {
    resources: Array<ResourcesPayloadType>;
};
declare function resourcesSchema(opts?: {
    allowedResources?: Array<ResourceTypesType>;
}): {
    $id: string;
    definitions: {};
    anyOf: {
        $ref: string;
    }[];
};
declare function generateResourcesFacet(resources: ResourcesPayloadType): import("@sevone/insight-wdk/dist/types/facet-manager/types").FacetType;
declare function mixedResourcesSchema(opts?: {
    allowedResources?: Array<ResourceTypesType>;
}): {
    $id: string;
    definitions: {};
    type: string;
    properties: {
        resources: {
            type: string;
            items: {
                anyOf: {
                    $ref: string;
                }[];
            };
        };
    };
    required: string[];
};
declare function generateMixedResourcesFacet(resources: MixedResourcesPayloadType): import("@sevone/insight-wdk/dist/types/facet-manager/types").FacetType;
export { resourcesSchema, generateResourcesFacet, mixedResourcesSchema, generateMixedResourcesFacet };
