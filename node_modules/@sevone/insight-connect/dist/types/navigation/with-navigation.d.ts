import * as React from 'react';
import { NavigationType } from './types';
declare type WithNavigationProps = Partial<NavigationType & {
    match: any;
}>;
declare const Test: (props: {
    location: {
        pathname: string;
        hash: string;
        params: {
            [key: string]: any;
        };
        state: {
            [key: string]: any;
        };
    };
    foo: boolean;
}) => null;
declare function withNavigation<T extends WithNavigationProps = WithNavigationProps>(WrappedComponent: React.ComponentType<T>): (props: Pick<T, Exclude<keyof T, "match" | "location" | "navigateTo" | "navigateInPlace">>) => JSX.Element;
declare const WrappedTest: (props: Pick<{
    location: {
        pathname: string;
        hash: string;
        params: {
            [key: string]: any;
        };
        state: {
            [key: string]: any;
        };
    };
    foo: boolean;
}, "foo">) => JSX.Element;
export { Test, WrappedTest, withNavigation };
