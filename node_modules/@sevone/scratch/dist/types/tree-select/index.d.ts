import * as React from 'react';
import { ListType } from './utils';
declare type IdType = string | number;
declare type SelectOptionType = {
    label: string;
    value: IdType;
};
declare type Props = {
    /** Text displayed when nothing is selected */
    placeholder?: string;
    /** Label to describe the select */
    label?: string;
    /** Whether it is disabled or not */
    disabled?: boolean;
    /** Whether the current selection can be cleared */
    clearable?: boolean;
    /** Special effect to indicate status/validation of field */
    status?: 'error' | 'warning';
    /** Allow multi selection */
    isMulti?: boolean;
    /** Whether the select shoulbe be considered loading */
    isLoading?: boolean;
    /** The max number of pills to display with multi selection enabled */
    maxDisplayed?: number;
    /** The ids of selected options */
    value: Array<IdType>;
    /** Available options to select from */
    options: Array<ListType>;
    /**
     * The ids of options to display. The entire path (all parents and children)
     * will be shown for any given id in this list.
     */
    shownOptions?: Array<IdType>;
    /** The ids of which options should be expanded in the tree */
    expanded: Array<IdType>;
    /** Triggered when the user modifies the selection */
    onChange: (id: Array<IdType>) => void;
    /** Triggered when the user modifies the filter */
    onFilterChange?: (filter: string) => (void | Promise<any>);
    /** Triggered when the user expands a tree node */
    onExpand: (id: IdType) => (void | Promise<any>);
    /** Triggered when the user collapses a tree node */
    onCollapse: (id: IdType) => void;
};
declare type State = {
    filterInProgress: boolean;
    lastOptions: ListType[];
    lastShownOptions: IdType[];
    internalExpanded: IdType[];
};
declare class TreeSelect extends React.PureComponent<Props, State> {
    static defaultProps: {
        placeholder: string;
    };
    state: State;
    selectRef: React.RefObject<HTMLInputElement>;
    constructor(props: Props);
    static getDerivedStateFromProps(props: Props, state: State): {
        lastOptions: ListType[];
        lastShownOptions: (string | number)[];
        internalExpanded: (string | number)[];
        filterInProgress: boolean;
    };
    isLoading(): boolean;
    getSelectValue(): {
        label: string;
        value: string | number;
    }[];
    getSelectOptions(): {
        label: string;
        value: string | number;
    }[];
    handleSelectChange: (values: SelectOptionType | SelectOptionType[]) => void;
    handleFilterChange: (filter: string, event: {
        action: string;
    }) => void;
    handleLabelClick: () => void;
    handleCollapse: (id: string | number) => void;
    renderMenuList: (props: {
        maxHeight: number;
        selectOption: (option: {
            label: string;
            value: string;
        }) => void;
    }) => JSX.Element;
    render(): JSX.Element;
}
export { TreeSelect };
