import * as React from 'react';
import { Cancelable } from '../utils/cancelable';
declare type IdType = string | number;
declare type DataType = {
    id: IdType;
    label: string;
    children?: Array<DataType>;
};
declare type Props = {
    data: DataType;
    depth: number;
    selectedNodes: Array<IdType>;
    expandedNodes: Array<IdType>;
    renderSelectedClassname?: string;
    renderLabel: React.FunctionComponent<{
        data: DataType;
        selected: boolean;
        expanded: boolean;
    }> | null | undefined;
    onSelect: (id: IdType) => void;
    onDeselect: (id: IdType) => void;
    onExpand: (id: IdType) => (void | Promise<any>);
    onCollapse: (id: IdType) => void;
};
declare type State = {
    request: Cancelable | null | undefined;
};
declare class Node extends React.PureComponent<Props, State> {
    state: State;
    componentWillUnmount(): void;
    generateIndent: (depth: number) => {
        '--tree-indent': number;
    };
    handleChildrenToggle: (event: React.MouseEvent<Element, MouseEvent>) => void;
    handleNodeClick: () => void;
    render(): JSX.Element;
}
export default Node;
