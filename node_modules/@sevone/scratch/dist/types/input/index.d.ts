import * as React from 'react';
declare type Props = {
    /** Value of the input */
    value: string | null | undefined;
    /** Label to describe the input */
    label?: string;
    /** Whether it is disabled or not */
    disabled?: boolean;
    /** Text displayed when the value is empty */
    placeholder?: string;
    /** Focus on the input when it is presented */
    autofocus?: boolean;
    /** The minimum value. Only compatible with a number type */
    min?: number;
    /** The maximum value. Only compatible with a number type */
    max?: number;
    /** The granularity of the value. Only compatible with a number type */
    step?: number;
    /** Identify the input on the page and as form data  */
    name?: string;
    /** The type of input to display */
    type?: string;
    /** Special effect to indicate status/validation of input */
    status?: 'error' | 'warning';
    /** Specify what if any permission the user agent has to provide automated assistance */
    autocomplete?: string;
    /** Icon to prefix the input with */
    prefixIcon?: React.ReactNode;
    /** Icon to append the input with */
    suffixIcon?: React.ReactNode;
    /** Triggered when a user modifies the input's value */
    onChange: (value: string) => void;
    /** Triggered when a user loses focus on the input */
    onBlur?: () => void;
    /** Triggered when the user focuses on the input */
    onFocus?: () => void;
    /** Triggered when a user presses down a key while focused on the input */
    onKeyDown?: (event: React.KeyboardEvent<HTMLInputElement>) => void;
};
declare class Input extends React.Component<Props> {
    static defaultProps: {
        type: string;
    };
    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    handleBlur: () => void;
    handleFocus: () => void;
    handleKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => void;
    render(): JSX.Element;
}
export { Input };
