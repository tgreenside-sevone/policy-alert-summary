/// <reference types="lodash" />
import * as React from 'react';
import { IdType, RowType, ColumnType, SortByType } from '../types';
declare type Props = {
    rows: Array<RowType>;
    columns: Array<ColumnType>;
    sortBy: Array<SortByType>;
    selectedRows: Array<IdType>;
    pinned?: boolean;
    page?: number | undefined;
    pageSize?: number | undefined;
    rowCount?: number | undefined;
    virtualScroll?: boolean;
    onRowSelection?: (selected: Array<IdType>) => void;
    onScrollBottom?: () => Promise<any>;
    onScrollbarWidthChange: (width: number) => void;
};
declare class Columns extends React.PureComponent<Props> {
    scrollRequest: Promise<any> | null;
    containerRef: React.RefObject<HTMLDivElement>;
    componentDidMount(): void;
    componentDidUpdate(prevProps: Props): void;
    componentWillUnmount(): void;
    adjustForScrollbar: (() => void) & import("lodash").Cancelable;
    getContainerElement(): HTMLDivElement;
    sortRows: (rows: RowType[], columns: ColumnType[], sortBy: SortByType[]) => RowType[];
    getColumns: (columns: ColumnType[]) => ColumnType[];
    handleRowSelection: (rows: (string | number)[]) => void;
    handleScroll: (event: UIEvent) => void;
    paginateRows: (rows: RowType[], page: number, pageSize: number, rowCount: number) => RowType[];
    renderRow: ({ isSelected, row, columns, pinned, selectable }: {
        isSelected: boolean;
        row: RowType;
        columns: ColumnType[];
        pinned: boolean;
        selectable: boolean;
    }) => JSX.Element;
    render(): JSX.Element;
}
export default Columns;
