import * as React from 'react';
import { IdType, RowType, ColumnType, SortByType } from './types';
declare type Props = {
    /** Rows to display */
    rows: Array<RowType>;
    /** Columns to display */
    columns: Array<ColumnType>;
    /** The IDs of rows you want selected */
    selectedRows?: Array<IdType>;
    /** Rows to pin to the top of the table's rows */
    pinnedTopRows?: Array<RowType>;
    /** Rows to pin to the bottom of the table's rows */
    pinnedBottomRows?: Array<RowType>;
    /** The current page to display */
    page?: number;
    /** The number of rows to display per page */
    pageSize?: number;
    /**
     * The total number of rows, if it is different than the length of `rows`.
     * Necessary when remotely paging rows.
     */
    rowCount?: number;
    /** Whether the table should be displayed in a loading state */
    loading?: boolean;
    /** Whether to render only the rows visible in the viewport */
    virtualScroll?: boolean;
    /** Triggered when a user modifies the row selection */
    onRowSelection?: (selected: Array<IdType>) => void;
    /** Triggered when a user reorders the columns */
    onColumnReorder?: (order: Array<IdType>, parent: IdType | null) => void;
    /** Triggered when a user resizes a column */
    onColumnResize?: (column: IdType, width: string | number) => void;
    /** Triggered when a user sorts a column */
    onSortBy?: (sortBy: Array<SortByType>) => void;
    /** Triggered when a user changes the current page */
    onPageChange?: (page: number) => void;
    /**
     * Triggered when a user nears the end of the table.
     * Useful for infinitely loading more rows as the user scrolls.
     */
    onScrollBottom?: () => Promise<any>;
};
declare type State = {
    sortBy: Array<SortByType>;
    scrollbarWidth: number;
};
declare class Table extends React.PureComponent<Props, State> {
    static defaultProps: {
        selectedRows: (string | number)[];
    };
    state: {
        sortBy: SortByType[];
        scrollbarWidth: number;
    };
    handleScrollbarWidthChange: (width: number) => void;
    handleColumnSort: (column: string) => void;
    getColumnsWithSelectAll: (columns: ColumnType[], rows: RowType[], numOfSelectedRows: number) => ColumnType[];
    render(): JSX.Element;
}
export default Table;
