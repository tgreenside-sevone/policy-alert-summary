import * as React from 'react';
declare type availablePositions = 'top' | 'right' | 'bottom' | 'left' | 'center';
declare type Props = {
    /** Whether the menu is visible or not */
    visible: boolean;
    /** Where the menu should position itself relative to the dropdown */
    position: [availablePositions, availablePositions];
    /** Which mouse actions should trigger visibility changes */
    trigger: Array<'click' | 'hover'>;
    /**
     * The amount of time, in milliseconds, to allow for hover events between
     * the target and popout elements.
     */
    hoverSensitivity?: number;
    triggerDelay?: number;
    /** The component to display when the popout is visible */
    popout: (props: {
        ref: React.RefObject<any>;
        onClick: () => void;
        onMouseOver: () => void;
        onMouseOut: () => void;
    }) => React.ReactNode;
    /** The tag used to wrap your target component */
    as?: React.ReactType;
    /** Class to add to your target wrapper */
    className?: string;
    /** Class to add to your popout wrapper */
    popoutClassName?: string;
    /** Styles to add to your target wrapper */
    style?: React.CSSProperties;
    /** Horizontal offset of the popout */
    offsetX?: number;
    /** Vertical offset of the popout */
    offsetY?: number;
    /** Triggered when a user clicks on the target */
    onClick?: (event: React.MouseEvent) => void;
    /** Triggered when a user performs an action to change the popout visiblity */
    onVisibilityChange: (shown: boolean) => void;
};
declare class PopoutTarget extends React.Component<Props> {
    static defaultProps: {
        hoverSensitivity: number;
        triggerDelay: number;
        as: string;
        className: string;
        style: {};
        offsetX: number;
        offsetY: number;
    };
    mouseoverTimer: number | null;
    mouseoutTimer: number | null;
    componentWillUnmount(): void;
    togglePopout(isVisible: boolean): void;
    listenOutside: () => void;
    unlistenOutside: () => void;
    handleOutsideClick: (event: MouseEvent) => void;
    handleTargetClick: (event: React.MouseEvent<Element, MouseEvent>) => void;
    handlePopoutClick: () => void;
    handleMouseOver: () => void;
    handleMouseOut: () => void;
    renderTarget: (ref: React.RefObject<HTMLElement>) => JSX.Element;
    renderPopout: (ref: React.RefObject<HTMLElement>) => React.ReactNode;
    render(): JSX.Element;
}
export { PopoutTarget };
