import * as React from 'react';
import { Cancelable } from '../utils/cancelable';
declare type Props = {
    disabled?: boolean;
    secondary?: boolean;
    loading?: Promise<any> | null;
    type?: 'contained' | 'outlined' | 'minimal';
    className?: string;
    onClick: (event: React.MouseEvent) => (void | Promise<any>);
    children: React.ReactNode;
};
declare type State = {
    loadingStatus: 'success' | 'error' | null;
    onClickTracker: Cancelable | null;
};
declare class RawButton extends React.Component<Props, State> {
    static defaultProps: {
        type: string;
    };
    state: State;
    successTimer: number | null;
    loadingTracker: Cancelable | null;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: Props): void;
    triggerLoadingTransition(status: 'success' | 'error'): void;
    handleClick: (event: React.MouseEvent<Element, MouseEvent>) => void;
    render(): JSX.Element;
}
export { RawButton };
