import * as React from 'react';
import SyncSelect from 'react-select';
import { OptionType, OptionsType } from './types';
declare type ReactSelectProps = React.ComponentProps<typeof SyncSelect>;
declare type Props = {
    placeholder?: string;
    disabled?: boolean;
    clearable?: boolean;
    status?: 'error' | 'warning';
    isMulti?: boolean;
    maxDisplayed?: number;
    creatable?: boolean;
    value: OptionType | Array<OptionType> | null | undefined;
    options: OptionsType | ((filter: string) => Promise<OptionsType>);
    noOptionsMessage?: string | null;
    menuPlacement?: 'top' | 'bottom' | 'auto';
    menuIsOpen?: boolean;
    isLoading?: boolean;
    components?: ReactSelectProps['components'];
    innerRef?: React.RefObject<HTMLInputElement>;
    formatOptionLabel?: (data: OptionType) => React.ReactNode;
    onChange: (data: OptionType | Array<OptionType>) => void;
    onBlur?: () => void;
    onInputChange?: (filter: string, event: {
        action: string;
    }) => void;
};
declare type State = {
    filter: string;
};
declare class RawSelect extends React.Component<Props, State> {
    state: {
        filter: string;
    };
    getAsyncOptions: (filter: string) => Promise<OptionsType<OptionType>>;
    debounceAsyncOptions: (filter: string) => Promise<OptionsType<OptionType>>;
    /**
     * This specific replacement component needs to be moved into the class
     * definition itself because it needs access to the `maxDisplayed` prop.
     * If we were to instead do something like `VC = (maxDisplayed) => () => {}`,
     * where we generate a render function from this class' render function,
     * something strange happens with react-select and its event handling. When
     * clicking off the select, the dropdown won't close. Only clicking the
     * select input itself will toggle the dropdown. So this is our workaround.
     */
    renderValueContainer: (props: any) => JSX.Element;
    renderAsyncSelector(props: Object): JSX.Element;
    renderSyncSelector(props: Object): JSX.Element;
    handleInputChange: (filter: string, event: {
        action: string;
    }) => string;
    noOptionsMessage: () => string;
    render(): JSX.Element;
}
export default RawSelect;
