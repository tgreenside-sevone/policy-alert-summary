import * as React from 'react';
declare type PresetOption = {
    label: string;
    value: string | number;
};
declare type CustomRangeValue = {
    startTime: number | null;
    endTime: number | null;
};
declare type ValueType = PresetOption | CustomRangeValue;
declare type Props = {
    /** Text displayed when nothing is selected */
    placeholder?: string;
    /** Label to describe the select */
    label?: string;
    /** Whether it is disabled or not */
    disabled?: boolean;
    /** Special effect to indicate status/validation of field */
    status?: 'error' | 'warning';
    /** Allow multi selection */
    isMulti?: boolean;
    /** The max number of pills to display with multi selection enabled */
    maxDisplayed?: number;
    /** Placement of the menu relative to the select field */
    menuPlacement?: 'top' | 'bottom' | 'auto';
    /** Available presets to select from */
    options?: Array<PresetOption>;
    /** Dates to mark on the calendar */
    markedDates?: Array<number>;
    /** The selected values. A custom range is represented in milliseconds */
    value: Array<ValueType>;
    /** Triggered when the user modifies the selection */
    onChange: (data: Array<ValueType>) => void;
    /** Triggered when the input is blurred */
    onBlur?: () => void;
};
declare type State = {
    dropdownIsFocused: boolean;
};
declare class RangeSelect extends React.Component<Props, State> {
    static defaultProps: Partial<Props>;
    state: State;
    containerRef: React.RefObject<HTMLDivElement>;
    selectRef: React.RefObject<HTMLInputElement>;
    dropdownRef: React.RefObject<HTMLDivElement>;
    componentDidMount(): void;
    componentWillUnmount(): void;
    isCustomRange(value: ValueType): value is CustomRangeValue;
    transformCustomRangeIntoOption(startTime: number, endTime: number): {
        label: string;
        value: string;
    };
    generateOptionsList(): PresetOption[];
    generateValueList(): PresetOption[];
    handleLabelClick: () => void;
    handleChange: (value: PresetOption[]) => void;
    /**
     * START Weird `react-select` hack:
     * The logic behind showing/hiding the select's menu is to trigger it when
     * the value's input is blurred. This is a problem for us because we need
     * to shift focus to our dropdown's various time inputs for customm ranges
     * when the menu is opened and the user wants to enter a time. By default,
     * when the user clicks one of those time inputs, the menu will close
     * because focus is lost on the `react-select` value input. In order to get
     * around this we need to treat `react-select` and its menu as a controlled
     * component via `menuIsOpen` _only_ when directly interacting with our
     * time inputs. We're using context here because we can't directly pass
     * our own props to a custom `react-select` component, and this seems cleaner
     * than using an HOC to do it.
     */
    handleDropdownFocus: () => void;
    handleDocumentClick: (event: MouseEvent) => void;
    registerDropdown: (ref: React.RefObject<HTMLDivElement>) => void;
    staticContext: {
        onDropdownFocus: () => void;
        registerDropdown: (ref: React.RefObject<HTMLDivElement>) => void;
    };
    /** END Weird `react-select` hack */
    renderMenuList: (props: any) => JSX.Element;
    render(): JSX.Element;
}
export { RangeSelect };
